# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This will parse a textual representation of a duration. The formats
# accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS}
# with days considered to be exactly 24 hours.
# <p>
# Examples:
# <pre>
#    "PT20.345S" -- parses as "20.345 seconds"
#    "PT15M"     -- parses as "15 minutes" (where a minute is 60 seconds)
#    "PT10H"     -- parses as "10 hours" (where an hour is 3600 seconds)
#    "P2D"       -- parses as "2 days" (where a day is 24 hours or 86400 seconds)
#    "P2DT3H4M"  -- parses as "2 days, 3 hours and 4 minutes"
#    "P-6H3M"    -- parses as "-6 hours and +3 minutes"
#    "-P6H3M"    -- parses as "-6 hours and -3 minutes"
#    "-P-6H+3M"  -- parses as "+6 hours and -3 minutes"
# </pre>
filter: "{ tags -> tags.job_name == 'nginx-monitoring' }" # The OpenTelemetry job name
expPrefix: tag({tags -> tags.service = 'nginx::' + tags.service})
expSuffix: instance(['service'],['service_instance_id'], Layer.NGINX)
metricPrefix: meter_nginx_instance
metricsRules:
  - name: http_requests
    exp: nginx_http_requests_total.sum(['service','service_instance_id']).rate('PT1M')
  - name: http_latency
    exp: nginx_http_latency.sum(['le','service','service_instance_id']).histogram().histogram_percentile([50,75,90,95,99])
  - name: http_bandwidth
    exp: nginx_http_size_bytes.sum(['type','service','service_instance_id']).rate('PT1M')
  - name: http_connections
    exp: nginx_http_connections.sum(['state','service','service_instance_id'])
  - name: http_status
    exp: nginx_http_requests_total.sum(['status','service','service_instance_id']).rate('PT1M')
  - name: http_requests_increment
    exp: nginx_http_requests_total.sum(['service','service_instance_id']).increase('PT1M')
  - name: http_4xx_requests_increment
    exp: nginx_http_requests_total.tagMatch("status", "400|401|403|404|405").sum(['service','service_instance_id']).increase('PT1M')
  - name: http_5xx_requests_increment
    exp: nginx_http_requests_total.tagMatch("status", "500|502|503|504").sum(['service','service_instance_id']).increase('PT1M')