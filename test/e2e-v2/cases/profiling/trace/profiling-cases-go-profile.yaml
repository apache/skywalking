# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is used to test Go profile data collection with GoProfileData message

  cases:
    # service list
    - query: swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql service ls
      expected: expected/service.yml
    # service instance list  
    - query: swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql instance list --service-name=e2e-service-provider
      expected: expected/service-instance.yml
    # create Go profiling task
    - query: |
        swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql \
          profiling trace create --service-name=e2e-service-provider \
            --endpoint-name=GET:/profile \
            --start-time=-1 \
            --duration=1 --min-duration-threshold=1000 \
            --dump-period=500 --max-sampling-count=3
      expected: expected/go-profile-create.yml
    # wait for Go agent to receive task and start profiling
    - query: sleep 5 && swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace list --service-name=e2e-service-provider --endpoint-name=GET:/profile
      expected: expected/go-profile-list-notified.yml
    # trigger Go service to generate profile data (Go agent will send GoProfileData messages)
    - query: |
        curl -s http://${provider_host}:${provider_9090}/profile > /dev/null;
        sleep 8;
        swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace list --service-name=e2e-service-provider --endpoint-name=GET:/profile
      expected: expected/go-profile-list-finished.yml
    # verify Go profile segments were collected via GoProfileData
    - query: |
        swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace segment-list --task-id=$( \
          swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace list --service-name=e2e-service-provider --endpoint-name=GET:/profile | yq e '.[0].id' - \
        )
      expected: expected/profile-segment-list-go.yml
    # analyze Go profile data with trace_id support
    - query: |
        segmentid=$( \
          swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace segment-list --task-id=$( \
            swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace list --service-name=e2e-service-provider --endpoint-name=GET:/profile | yq e '.[0].id' - \
          ) | yq e '.[0].spans.[] | select(.spanid == 0) | .segmentid' - \
        );
        start=$(
          swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace segment-list --task-id=$( \
            swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace list --service-name=e2e-service-provider --endpoint-name=GET:/profile | yq e '.[0].id' - \
          ) | yq e '.[0].spans.[] | select(.spanid == 0) | .starttime' - \
        );
        end=$(
          swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace segment-list --task-id=$( \
            swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace list --service-name=e2e-service-provider --endpoint-name=GET:/profile | yq e '.[0].id' - \
          ) | yq e '.[0].spans.[] | select(.spanid == 0) | .endtime' - \
        );
        swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace analysis --segment-ids=$segmentid --time-ranges=$(echo $start"-"$end)
      expected: expected/profile-segment-analyze-go.yml
