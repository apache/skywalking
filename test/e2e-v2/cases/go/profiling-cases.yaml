# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is used to show how to write configuration files and can be used to test.

setup:
  env: compose
  file: docker-compose.yml
  timeout: 20m
  init-system-environment: ../../script/env
  steps:
    - name: set PATH
      command: export PATH=/tmp/skywalking-infra-e2e/bin:$PATH
    - name: install yq
      command: bash test/e2e-v2/script/prepare/setup-e2e-shell/install.sh yq
    - name: install swctl
      command: bash test/e2e-v2/script/prepare/setup-e2e-shell/install.sh swctl

trigger:
  action: http
  interval: 3s
  times: 60
  url: http://${go-service_host}:${go-service_8080}/profile
  method: GET

verify:
  retry:
    count: 20
    interval: 3s
  cases:
    # create profiling task for Go service
    - query: |
        swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql \
          profiling trace create --service-name=go-service \
            --endpoint-name=GET:/profile \
            --start-time=-1 \
            --duration=1 --min-duration-threshold=1000 \
            --dump-period=500 --max-sampling-count=3
      expected: expected/profile-create.yml

    # profiling list notified: sleep to wait agent notices and query profiling list
    - query: sleep 3 && swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace list -service-name=go-service --endpoint-name=GET:/profile
      expected: expected/profile-list-notified.yml


    # profiling list finished
    - query: |
        go_host=$(printenv go-service_host || printenv go_service_host)
        go_port=$(printenv go-service_8080 || printenv go_service_8080)
        curl -s -XGET http://$go_host:$go_port/profile > /dev/null;
        sleep 30;
        swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace list -service-name=go-service --endpoint-name=GET:/profile
      expected: expected/profile-list-finished.yml

    # profiled segment list
    - query: |
        sleep 30;
        swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace segment-list --task-id=$( \
          swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace list -service-name=go-service --endpoint-name=GET:/profile | yq e '.[0].id' - \
        )
      expected: expected/profile-segment-list.yml

    # query profiled segment analyze
    - query: |
        segmentid=$( \
          swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace segment-list --task-id=$( \
            swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace list -service-name=go-service --endpoint-name=GET:/profile | yq e '.[0].id' - \
          ) | yq e '.[0].spans.[] | select(.spanid == 0) | .segmentid' - \
        );
        start=$(
          swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace segment-list --task-id=$( \
            swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace list -service-name=go-service --endpoint-name=GET:/profile | yq e '.[0].id' - \
          ) | yq e '.[0].spans.[] | select(.spanid == 0) | .starttime' - \
        );
        end=$(
          swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace segment-list --task-id=$( \
            swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace list -service-name=go-service --endpoint-name=GET:/profile | yq e '.[0].id' - \
          ) | yq e '.[0].spans.[] | select(.spanid == 0) | .endtime' - \
        );
        swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql profiling trace analysis --segment-ids=$segmentid --time-ranges=$(echo $start"-"$end)
      expected: expected/profile-segment-analyze.yml