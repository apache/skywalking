// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Profile is a common stacktrace profile format.
//
// Measurements represented with this format should follow the
// following conventions:
//
// - Consumers should treat unset optional fields as if they had been
//   set with their default value.
//
// - When possible, measurements should be stored in "unsampled" form
//   that is most useful to humans.  There should be enough
//   information present to determine the original sampled values.
//
// - On-disk, the serialized proto must be gzip-compressed.
//
// - The profile is represented as a set of samples, where each sample
//   references a sequence of locations, and where each location belongs
//   to a mapping.
// - There is a N->1 relationship from sample.location_id entries to
//   locations. For every sample.location_id entry there must be a
//   unique Location with that id.
// - There is an optional N->1 relationship from locations to
//   mappings. For every nonzero Location.mapping_id there must be a
//   unique Mapping with that id.

syntax = "proto3";

package perftools.profiles;

option java_package = "com.google.perftools.profiles";
option java_outer_classname = "ProfileProto";

message Profile {
  repeated ValueType sample_type = 1;
  repeated Sample sample = 2;
  repeated Mapping mapping = 3;
  repeated Location location = 4;
  repeated Function function = 5;
  repeated string string_table = 6;
  int64 drop_frames = 7;   // Index into string table.
  int64 keep_frames = 8;  // Index into string table.

  int64 time_nanos = 9;
  int64 duration_nanos = 10;
  ValueType period_type = 11;
  int64 period = 12;
  repeated int64 comment = 13; // Indices into string table.
  int64 default_sample_type = 14;
  int64 doc_url = 15;  // Index into string table.
}

message ValueType {
  int64 type = 1; // Index into string table.
  int64 unit = 2; // Index into string table.
}

message Sample {
  repeated uint64 location_id = 1;
  repeated int64 value = 2;
  repeated Label label = 3;
}

message Label {
  int64 key = 1;
  int64 str = 2;   // Index into string table
  int64 num = 3;
  int64 num_unit = 4;  // Index into string table
}

message Mapping {
  uint64 id = 1;
  uint64 memory_start = 2;
  uint64 memory_limit = 3;
  uint64 file_offset = 4;
  int64 filename = 5;  // Index into string table
  int64 build_id = 6;  // Index into string table
  bool has_functions = 7;
  bool has_filenames = 8;
  bool has_line_numbers = 9;
  bool has_inline_frames = 10;
}

message Location {
  uint64 id = 1;
  uint64 mapping_id = 2;
  uint64 address = 3;
  repeated Line line = 4;
  bool is_folded = 5;
}

message Line {
  uint64 function_id = 1;
  int64 line = 2;
  int64 column = 3;
}

message Function {
  uint64 id = 1;
  int64 name = 2; // Index into string table
  int64 system_name = 3; // Index into string table
  int64 filename = 4; // Index into string table
  int64 start_line = 5;
}
